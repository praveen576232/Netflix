{"version":3,"sources":["Requests/axios.js","Row/Row.js","Requests/request.js","Banner/Banner.js","Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","requests","isLargeRow","useState","movies","setMovies","traielUrl","settraielUrl","useEffect","a","get","request","data","results","fetchmovies","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParms","URLSearchParams","URL","search","catch","error","console","log","message","getmovietriler","alt","src","poster_path","backdrop_path","videoId","opts","height","width","playerVars","autoplay","featchTrending","process","featchNetFlixOriginal","featchTopRated","featchActionMovies","featchComedyMovies","featchHororMovies","featchRomanceMovies","featchDoumentMovies","Banner","str","n","banner","setBanner","result","Math","floor","random","length","feachBanner","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","handelshow","sethandelshow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f72592e1.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\nexport default instance;","import React,{useState,useEffect} from 'react'\r\nimport './Row.css';\r\nimport axios from '../Requests/axios';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\nconst baseurl = \"https://image.tmdb.org/t/p/original/\"\r\nfunction Row({title,requests,isLargeRow}) {\r\n    const [movies,setMovies]=useState([]);\r\n    const[traielUrl,settraielUrl] =useState(\"\");\r\n    const opts={\r\n    height:\"300\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1\r\n    },\r\n    }\r\n\r\n    const getmovietriler =(movie) =>{\r\n        if(traielUrl){\r\n            settraielUrl('')\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) =>{\r\n             \r\n            const urlParms =new URLSearchParams(new URL(url).search);\r\n            settraielUrl(urlParms.get(\"v\"))\r\n            }).catch((error)=>{\r\n                console.log(error.message)\r\n            })\r\n            \r\n        }\r\n        console.log(traielUrl)\r\n    }\r\n    useEffect(() => {\r\n      const fetchmovies =async()=>{\r\n      const request = await axios.get(requests);\r\n   \r\n   setMovies(request.data.results);\r\n   return request;\r\n      }\r\n        fetchmovies();\r\n    }, [requests])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className={\"row_poasters\"}>\r\n                 {\r\n                     movies.map(movie =>(\r\n                         <img\r\n\r\n                         key={movie.id}\r\n                         onClick={()=>getmovietriler(movie)}\r\n                         className={`row_poast ${isLargeRow && \"row_poaster_large\"}`}\r\n                         alt={movie.name} src={`${baseurl}${isLargeRow?movie.poster_path:movie.backdrop_path}`}></img>\r\n                     ))\r\n                 }\r\n            </div>\r\n           {traielUrl && (<YouTube videoId={traielUrl} opts={opts}></YouTube>)} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","\r\n\r\nexport default {\r\n  featchTrending: `/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  featchNetFlixOriginal: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_networks=213`,\r\n  featchTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  featchActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\r\n  featchComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  featchHororMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=27`,\r\n  featchRomanceMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10749`,\r\n  featchDoumentMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=99`,\r\n};\r\n","import './Banner.css'\r\nimport React, { useState, useEffect } from 'react'\r\nimport request from '../Requests/request';\r\nimport axios from '../Requests/axios';\r\nfunction Banner() {\r\n    const [banner,setBanner] =useState([]);\r\n    useEffect(()=>{\r\n      async function feachBanner () {\r\n         const result = await axios.get(request.featchNetFlixOriginal);\r\n         setBanner(result.data.results[Math.floor(Math.random() * result.data.results?.length-1)])\r\n         return result;\r\n        }\r\n        feachBanner();\r\n    },[]);\r\n    function truncate(str,n){\r\n        return str?.length >n?str.substr(0,n-1)+\"...\":str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${banner?.backdrop_path}\")`,\r\n            backgroundPosition:'center center'\r\n            \r\n        }}\r\n        >\r\n          <div className=\"banner_container\">\r\n    <h1 className=\"banner_title\">{banner?.title || banner?.name || banner?.original_name}</h1>\r\n         <div className=\"banner_buttons\">\r\n         <button className=\"banner_button\">Play</button>\r\n         <button className=\"banner_button\">My List</button>\r\n         </div>\r\n    <h1 className=\"banner_movie_discriptions\">{truncate(banner?.overview,150)}</h1>\r\n          </div>\r\n          <div className=\"banner--fadebottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import './Nav.css';\r\nimport React,{useEffect,useState} from 'react'\r\n\r\nfunction Nav() {\r\n    const [handelshow,sethandelshow] =useState(false);\r\n    useEffect(() => {\r\n    window.addEventListener(\"scroll\",()=>{\r\n        if(window.scrollY > 100){\r\nsethandelshow(true);\r\n        }else{\r\nsethandelshow(false)\r\n        }\r\n    });\r\n    return ()=>{\r\n        window.removeEventListener(\"scroll\")\r\n    }\r\n       \r\n    }, [])\r\n    return (\r\n        <div className={`nav ${handelshow && \"nav_black\"}`}>\r\n            <img className=\"netflix_logo\" alt=\"\" src=\"http://assets.stickpng.com/thumbs/580b57fcd9996e24bc43c529.png\"></img>\r\n            <img className=\"netflix_smilee_logo\" alt=\"\" src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E.jpg\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\n\nimport './App.css';\nimport Row from './Row/Row';\nimport request from './Requests/request'\nimport Banner from './Banner/Banner';\nimport Nav from './Nav/Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav></Nav>\n     <Banner></Banner>\n     <Row title=\"NETFLEX ORIGINALS\" requests={request.featchNetFlixOriginal} isLargeRow></Row>\n     <Row title=\"Trending Now\" requests={request.featchTrending}></Row>\n     <Row title=\"Top Rated\" requests={request.featchTopRated}></Row>\n     <Row title=\"Action Movies\" requests={request.featchActionMovies}></Row>\n     <Row title=\"Comedy Movies\" requests={request.featchComedyMovies}></Row>\n     <Row title=\"Horror Movies\" requests={request.featchHororMovies}></Row>\n     <Row title=\"Romance Movies\" requests={request.featchRomanceMovies}></Row>\n     <Row title=\"Documentaries\" requests={request.featchDoumentMovies}></Row>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}